code = {
    "UUU": "F",      "CUU": "L",      "AUU": "I",      "GUU": "V",
    "UUC": "F",      "CUC": "L",      "AUC": "I",      "GUC": "V",
    "UUA": "L",      "CUA": "L",      "AUA": "I",      "GUA": "V",
    "UUG": "L",      "CUG": "L",      "AUG": "M",      "GUG": "V",
    "UCU": "S",      "CCU": "P",      "ACU": "T",      "GCU": "A",
    "UCC": "S",      "CCC": "P",      "ACC": "T",      "GCC": "A",
    "UCA": "S",      "CCA": "P",      "ACA": "T",      "GCA": "A",
    "UCG": "S",      "CCG": "P",      "ACG": "T",      "GCG": "A",
    "UAU": "Y",      "CAU": "H",      "AAU": "N",      "GAU": "D",
    "UAC": "Y",      "CAC": "H",      "AAC": "N",      "GAC": "D",
    "UAA": "Stop",   "CAA": "Q",      "AAA": "K",      "GAA": "E",
    "UAG": "Stop",   "CAG": "Q",      "AAG": "K",      "GAG": "E",
    "UGU": "C",      "CGU": "R",      "AGU": "S",      "GGU": "G",
    "UGC": "C",      "CGC": "R",      "AGC": "S",      "GGC": "G",
    "UGA": "Stop",   "CGA": "R",      "AGA": "R",      "GGA": "G",
    "UGG": "W",      "CGG": "R",      "AGG": "R",      "GGG": "G"
}

fasta = ">Rosalind_99
AGCCATGTAGCTAACTCAGGTTACATGGGGATGACCCCGCGACTTGGATTAGAGTCTCTTTTGGAATAAGCCTGAATGATCCGAGTAGCATCTCAG"

#for line in fasta:
def parse_fasta(fasta):
    lines = fasta.strip().split("\n") #to separate the string into a list of lines
    s = "".join(lines[1:])
    return s


s = "CATGCCCTGAT"
s = s.replace("T", "U") #ooder for x in s, if xx == "T", print "U", elif x!=T print 
#Replace T with U

#template strand Ã¼bersetzen in coding strand

for x in s:
    def complement(x):
	    if x == "A":
		    return "U"
		elif x == "C":
		    return "G"
		elif x == "G":
			return "C"
		elif x == "U":
			return "A"

t = ""
for base in s:
	t += complement(base)
print(t[::-1]) #(reverse complement)

# ooder complement = {"A": "T", "T": "A", "C": "G", "G": "C"}

t = "AUCAGGGCAUG"
s = "CAUGCCCUGAU"

#translate to protein
peptide = ""
for start in range(0, len(t), 3):
    codon = t[start:start+3]
    aminoacid = code[codon]
    if aminoacid == "Stop":
        break
    peptide += aminoacid
return aminoacid
# go over s and t, 
#start at readingfram [0], [1], [2]

def orfs(s, t)
for frame in range(3):
    for start in range(frame, len(dna) -2, 3):
        codon = dna[start.]





